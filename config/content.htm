<h1>About</h1>
<p>國立虎尾科技大學機械設計工程系</p>
<p>National Formosa University</p>
<p>Department of Mechanical Design Engineering</p>
<p>cp2024 計算機程式</p>
<p>課程教材:</p>
<p style="padding-left: 30px;"><a href="https://blog.jupyter.org/introducing-learn-python-with-jupyter-11214f152159">Learn Python with Jupyter</a> (<a href="https://www.learnpythonwithjupyter.com/">site</a>, <a href="https://localhost:9445/downloads/learn_python_with_jupyter.pdf">ebook</a>)</p>
<p style="padding-left: 30px;">教育版帳號 microsoftonline 登入點: <a href="https://login.microsoftonline.com/">https://login.microsoftonline.com/</a></p>
<p>Teams 線上教學:</p>
<p style="padding-left: 30px;">以 "學號@nfu.edu.tw" 登入 <a href="https://login.microsoftonline.com/">https://login.microsoftonline.com/</a> Office 365</p>
<p style="padding-left: 30px;">Teams 團隊代碼: <span class="fui-Text ___vec8h90 fk6fouc f1pbo8a8 f1i3iumi figsok6 fpgzoln f1w7gpdv f6juhto f1mtd64y f1y7q3j9 f2jf649 foxqkq2" data-tid="join-team-code">ldodwua</span></p>
<p>個人倉儲:<a href="https://github.com/mdecp2024/hw-LSY41323121">mdecp2024/hw-LSY41323121: mdecp2024-hw-cp2024_hw created by GitHub Classroom</a><a href="https://github.com/mdecycu/cp2024"></a></p>
<p>個人網頁:<a href="https://mdecp2024.github.io/hw-LSY41323121/content/About.html">https://mdecp2024.github.io/hw-LSY41323121/content/About.html</a></p>
<p>其他資訊:<a href="https://mdecp2024.github.io/hw-LSY41323121/content/index.html">cp_hw (mdecp2024.github.io)</a></p>
<p style="padding-left: 30px;"><a href="/downloads/cd2023_pj3ag4_zmq_football_4.7.7z">cd2023_pj3ag4_zmq_football_4.7.7z</a></p>
<p style="padding-left: 30px;"><a href="https://localhost:9446/downloads/cd2024_2b_g6_steel_ball_platform_nxopen_copsim.7z">cd2024_2b_g6_steel_ball_platform_nxopen_copsim.7z</a></p>
<h1>Attendance</h1>
<p>出席 (10%) - 自行舉證評分</p>
<p>自行利用 Github commits 提交記錄評分.</p>
<h1>HW 1</h1>
<h4>主題: 基於瀏覽器的分散式版次管理與整合程式開發環境 (10%)<span style="background-color: #ffff99;"><br/></span></h4>
<p style="padding-left: 30px;">USB 隨身碟:</p>
<p style="padding-left: 60px;">下載 <a href="http://229.cycu.org/python_2025_lite.7z">python_2025_lite.7z</a> (428 MB, 解開壓縮後約 1.5 GB)</p>
<p style="padding-left: 30px;"><a href="https://mde.tw/cp2024/content/Jupyter.html">Jupyter</a></p>
<p style="padding-left: 30px;">What are Github and Codespaces?</p>
<p style="padding-left: 60px;"><a href="https://docs.github.com/en/get-started/start-your-journey/hello-world">Hello World - GitHub Docs</a></p>
<p style="padding-left: 30px;">利用包含學號的字串作為帳號, 申請免費使用 Github.</p>
<p style="padding-left: 30px;">Python 課程教材: <a href="https://www.learnpythonwithjupyter.com/">https://www.learnpythonwithjupyter.com/</a> - PART 1</p>
<hr/>
<p>PART 1: Creating the basics 資料整理 (10%)</p>
<p>啟動可攜程式系統後, 在命令列中:</p>
<p>y:\&gt;cd notebook</p>
<p>y:\notebook&gt;jupyter lab --collaborative</p>
<p>進入 <a href="/downloads/01_string_input_print.ipynb">01_string_input_print.ipynb</a> 練習如何修改 PART1 notebook 後存檔, 上傳至作業倉儲中的 downloads 目錄後, 透過 <a href="https://nbviewer.org/">https://nbviewer.org/</a> 將已經提交的 <a href="/downloads/01_string_input_print.ipynb">01_string_input_print.ipynb</a>, 嵌入下列網頁中.</p>
<p><iframe height="400" src="https://nbviewer.org/urls/mde.tw/cp2024_hw/downloads/01_string_input_print.ipynb" width="600"></iframe></p>
<p>上列 iframe 標註的 html 語法:</p>
<pre class="brush:html;auto-links:false;toolbar:false" contenteditable="false">&lt;iframe width="600" height="400" src="https://nbviewer.org/urls/mde.tw/cp2024_hw/downloads/01_string_input_print.ipynb"&gt;&lt;/iframe&gt;</pre>
<p>完成上述流程整理後, 請將 HW1 自評分數輸入 cp2024 自評表單中.</p>
<div id="tipue_search_content">HW 1 &lt;&lt;<span> </span><a href="https://mdecp2024.github.io/hw-41323122/content/HW%201.html">Previous</a><span> </span><a href="https://mdecp2024.github.io/hw-41323122/content/w7.html">Next</a><span> </span>&gt;&gt; w7<br/>
<h2>HW 1 Exam</h2>
<p>每六人為一組進行協同程式練習</p>
<p>透過 Jupyterlab 協同網頁, 輪流指定各組編寫 Topic 1 相關的程式練習, 以及網頁內容 (localhost 與 Codespaces 環境)編輯.</p>
<br/>HW 1 &lt;&lt;<span> </span><a href="https://mdecp2024.github.io/hw-41323122/content/HW%201.html">Previous</a><span> </span><a href="https://mdecp2024.github.io/hw-41323122/content/w7.html">Next</a><span> </span>&gt;&gt; w7</div>
<div class="container">
<div class="row pt-3 mx-auto">
<p>Copyright ©2024 All rights reserved | This template is made with<span> </span><i aria-hidden="true" class="icon-heart"></i><span> </span>by<span> </span><a href="https://colorlib.com/" target="_blank">Colorlib</a></p>
</div>
</div>
<p></p>
<h3>w7</h3>
<p><iframe allow="accelerometer; autoplay; clipboard-write; encrypted-media; gyroscope; picture-in-picture; web-share" allowfullscreen="allowfullscreen" frameborder="0" height="480" referrerpolicy="strict-origin-when-cross-origin" src="https://www.youtube.com/embed/kvMIkTN1CSA" title="41323121 設計一甲 林紹彥 w7" width="853"></iframe></p>
<p><iframe allow="accelerometer; autoplay; clipboard-write; encrypted-media; gyroscope; picture-in-picture; web-share" allowfullscreen="allowfullscreen" frameborder="0" height="479" referrerpolicy="strict-origin-when-cross-origin" src="https://www.youtube.com/embed/8HhHCQNCl54" title="四設計一甲 41323121  python" width="891"></iframe></p>
<h3>w10</h3>
<p><iframe allow="accelerometer; autoplay; clipboard-write; encrypted-media; gyroscope; picture-in-picture; web-share" allowfullscreen="allowfullscreen" frameborder="0" height="480" referrerpolicy="strict-origin-when-cross-origin" src="https://www.youtube.com/embed/bgXqTCfQkbY" title="國立虎尾科技大學機械設計工程系 - 計算機程式 - 題目一:41323121" width="853"></iframe><iframe allow="accelerometer; autoplay; clipboard-write; encrypted-media; gyroscope; picture-in-picture; web-share" allowfullscreen="allowfullscreen" frameborder="0" height="480" referrerpolicy="strict-origin-when-cross-origin" src="https://www.youtube.com/embed/N2wF1jfG4lA" title="國立虎尾科技大學機械設計工程系 - 計算機程式 - 題目二:41323121" width="853"></iframe></p>
<p>在 Python 中，變數命名規則：</p>
<ol>
<li><strong>首字母</strong>必須是字母或底線。</li>
<li><strong>後續字符</strong>可包含字母、數字、底線。</li>
<li><strong>區分大小寫</strong>。</li>
<li><strong>不能用關鍵字</strong>（如 <code>if</code>、<code>True</code>）。</li>
</ol>
<p><iframe allow="accelerometer; autoplay; clipboard-write; encrypted-media; gyroscope; picture-in-picture; web-share" allowfullscreen="allowfullscreen" frameborder="0" height="480" referrerpolicy="strict-origin-when-cross-origin" src="https://www.youtube.com/embed/n1k7rs6pHk8" title="國立虎尾科技大學機械設計工程系 - 計算機程式 - 題目三:41323121" width="853"></iframe></p>
<p>在做的過程當中我發現我有比之前又更進步了, 雖然我有些地方還是會卡卡的但是跟之前比起來有快了許多。</p>
<h3>w11_hw</h3>
<p>1.  已知可以用 Python 程式<a href="https://mde.tw/cp2024/content/Brython.html?src=https://gist.githubusercontent.com/mdecycu/5e6eda7a004c15fa7262b9a80bfa4af6/raw/c2225ac22f32ee8485a630b42cf3f4d8567bb661/up_to_down_pyramid.py">由上往下列印三角形 *</a>, 或<a href="https://mde.tw/cp2024/content/Brython.html?src=https://gist.githubusercontent.com/mdecycu/5e6eda7a004c15fa7262b9a80bfa4af6/raw/56793c72d4495d564e3cc6214ed5fb68dbd2b21d/left_to_right_pyramid.py">由左往右列印三角形 *</a>, 請將此程式延伸到可以在 10x10 的字元區域中, 以 "*" 字元列印出圓型區域. 完成後請將程式碼存入個人 Gist 後, 直接在個人作業網站中的 Brython 頁面中執行. (提示: ?src=gist_script_URL)</p>
<p><span>第一題解答:"</span><a href="https://mdecp2024.github.io/hw-LSY41323121/content/Brython.html?src=https://gist.githubusercontent.com/LSY41323121/9984252a15dda1f3af87353042900723/raw/63f2a71fe59566c6d2062e5fc195b2c0aadf615a/hw1.py">*"字號圓形</a></p>
<p>2. 已知可以在網頁中利用 Brython 繪製方格與塗色, 如下連結, 請設法修改此一程式, 直接將程式存入個人的 Gist, 並利用黑色方塊圍出一個圓形區域.</p>
<p><span>第二題解答:</span><a href="https://mdecp2024.github.io/hw-LSY41323121/content/Brython.html?src=https://gist.githubusercontent.com/LSY41323121/dc33bc902240fb1b07d7e4109b446aa2/raw/1021beb7e7c4707ee53c1384264608b7701fdf7f/hw2.py">網頁上的方格與塗色</a></p>
<p>3. 完成上列題目後, 請利用 Youtube 影片<span>簡報</span>個人的解題過程與心得.</p>
<p><iframe allow="accelerometer; autoplay; clipboard-write; encrypted-media; gyroscope; picture-in-picture; web-share" allowfullscreen="allowfullscreen" frameborder="0" height="360" referrerpolicy="strict-origin-when-cross-origin" src="https://www.youtube.com/embed/FnlTKJtwtJg" title="w11 41323121題目一、二詳解" width="640"></iframe></p>
<h3>w12_hw</h3>
<p>1. 請各組組員分別利用 Brython 以及 Jupyter lab 環境, 執行可攜程式 notebook 目錄中的 01_string_input_print.ipynb 至 10_for_search.ipynb 筆記本程式, 完成後請將能在 Brython 執行的程式碼存入個人 Gist 後, 將各程式執行連結放入 w12_hw 網頁上. 最後請說明各範例中所使用的程式語法以及執行心得.</p>
<p>第四題:list_append_remove</p>
<p>範例:<a href="https://mdecp2024.github.io/hw-LSY41323121/content/Brython.html?src=https://gist.githubusercontent.com/LSY41323121/b77690402abcf0dd733278356ebbd85f/raw/968b089b501c04a55fc710e5970a43aca5da015a/hw4.py">購物清單</a></p>
<p>說明:顯示目前的購物清單,提示使用者輸入想要新增的項目。 如果該項目已經在清單中，顯示已存在；如果沒有，將其添加到清單中,提示使用者輸入要刪除的項目。 如果該項目存在於清單中，就將其刪除，並顯示更新後的清單。如果該項目不在清單中，顯示錯誤訊息。</p>
<pre class="brush:py;auto-links:false;toolbar:false" contenteditable="false">shopping_list = ["milk", "bread", "eggs"]  # 初始購物清單
print("Current shopping list:", shopping_list)  # 顯示當前購物清單

new_item = input("Enter an item to add to the shopping list: ")  # 提示使用者輸入想加入的物品

# 檢查新項目是否已在清單中
if new_item in shopping_list:
    print(f"{new_item} is already in the shopping list.")  # 提示此項目已存在
else:
    shopping_list.append(new_item)  # 否則將新項目加入清單
    print(f"{new_item} has been added.")

print("Updated shopping list:", shopping_list)  # 顯示更新後的清單

item_to_remove = input("Enter an item to remove from the shopping list: ")  # 提示使用者輸入要刪除的物品

# 檢查要刪除的項目是否在清單中
if item_to_remove in shopping_list:
    shopping_list.remove(item_to_remove)  # 如果在清單中，將其刪除
    print(f"{item_to_remove} has been removed.")
else:
    print(f"{item_to_remove} is not in the shopping list.")  # 如果不在清單中，提示錯誤訊息

print("Final shopping list:", shopping_list)  # 顯示最終的清單
</pre>
<p><span>第五題:</span><span>05_list_index_pop_insert</span></p>
<p><span>範例:<a href="https://mdecp2024.github.io/hw-LSY41323121/content/Brython.html?src=https://gist.githubusercontent.com/LSY41323121/30fe34308067f1375c7fdd71a18389f0/raw/8b5df3ae317a9eb071cf6146bea5039069f17c97/hw5.py">點餐</a></span></p>
<p><span>說明:這段程式碼的目的是處理一個包含食物名稱的串列 (<code>menu_items</code>)，以檢查是否存在特定的元素並替換它。如果找到指定的項目，程式會先移除該項目，然後在相同位置插入一個新的項目。</span></p>
<pre class="brush:py;auto-links:false;toolbar:false" contenteditable="false">menu_items = ["pizza", "soup", "tea"]  # 設定一個串列到變數裡
print("Current menu:", menu_items)  # 列印 menu_items

# 使用 index 尋找串列裡的指定元素
item_to_change = "soup"
if item_to_change in menu_items:
    item_index = menu_items.index(item_to_change)  # 獲取元素的索引值
    print(f"Index of '{item_to_change}':", item_index)  # 顯示索引值

    # 使用 pop 刪除索引值對應的元素
    removed_item = menu_items.pop(item_index)
    print(f"Removed '{removed_item}' from the menu.")
    print("Menu after removal:", menu_items)  # 列印刪除後的 menu

    # 使用 insert 在同一索引值加入新元素
    new_item = "garlic bread"
    menu_items.insert(item_index, new_item)
    print(f"Added '{new_item}' to the menu.")
    print("Updated menu:", menu_items)  # 列印更新後的 menu
else:
    print(f"'{item_to_change}' not found in the menu.")  # 如果元素不存在，顯示錯誤信息
</pre>
<p><span>第六題:06_list_slicing</span></p>
<p><span>範例:<a href="https://mdecp2024.github.io/hw-LSY41323121/content/Brython.html?src=https://gist.githubusercontent.com/LSY41323121/f08c32875b35d9ec940b795388c25e5b/raw/9fa942129c7bf82fea8636641a58b8c1140f174b/hw6.py">城市</a></span></p>
<p><span>說明:在 Python 中，串列（list）是一種常用的資料結構，用於存儲有序的元素集合。透過索引和切片，我們可以輕鬆地存取和操作串列中的元素。</span></p>
<pre class="brush:py;auto-links:false;toolbar:false" contenteditable="false">countries = ["USA", "Czech Republic", "South Africa", "Japan", "Australia"]  # 設定一個串列
print(countries)  # 列印串列裡的元素
print(countries[1])  # 印出串列裡索引值1的元素
print(countries[0:3])  # 印出串列裡索引值0~2的元素
print(countries[0:5:2])  # 印出串列裡索引值範圍0~4, 間隔2的元素
print(countries[:2])  # 未設定起始索引值默認取0開始, 印出索引值0~1的元素
print(countries[2:])  # 未設定末端索引值默認取到最後, 印出索引值2~最後的元素
print(countries[3])  # 印出串列裡索引值3的元素
print(countries[-1])  # 印出串列裡索引值從後面往前數第1個的元素
print(countries[-3:-1])  # 印出串列裡索引值從後面往前數第3個開始, 到倒數第2個結束的元素
print(countries[::-1])  # 倒序列印整個串列的元素</pre>
<p></p>
<div id="brython_div1"></div>
<!-- 導入 brython 程式庫 -->
<p>
<script src="/static/brython.js"></script>
<script src="/static/brython_stdlib.js"></script>
</p>
<!-- 啟動 Brython -->
<p>
<script>
window.onload=function(){
brython({debug:1, pythonpath:['./../cmsimde/static/','./../downloads/py/']});
}
</script>
<script type="text/python3">
from browser import html
from browser import document as doc
 
# 利用 html 建立 canvas 超文件物件
canvas = html.CANVAS(width=400, height=400)
brython_div = doc["brython_div1"]
brython_div <= canvas

ctx = canvas.getContext("2d")
ctx.lineWidth = 1
ctx.strokeStyle = 'red'
ctx.beginPath() 
ctx.rect(0, 0, 200, 200)
ctx.stroke()
</script>
</p>
<h3>w14_ex</h3>
<p><span>請根據兩個圓繪圖所圍成的區域(目前圍成三個區域, 但若圓心移動可能彼此獨立)進行不同顏色著色, 條件是當各圓半徑與圓心座標變動時, 程式只需輸入兩個圓的圓心座標與半徑, 就可以完成各區域的著色任務. 參考範例 多個圓相交區域著色範例</span></p>
<p><a href="https://mdecp2024.github.io/hw-LSY41323121/content/Brython.html?src=https://gist.githubusercontent.com/LSY41323121/0da3ba86f8232275ad69b3326ffb4498/raw/3cc5d01858a59cd466a2d836e4fc64425a1b1a4a/hw1.py">作業</a></p>
<pre class="brush:py;auto-links:false;toolbar:false" contenteditable="false">from browser import html
from browser import document as doc
import random
import math

# 初始化畫布
def initialize_canvas(canvas_width=400, canvas_height=400, id="brython_div1"):
    """
    初始化一個畫布，返回畫布和 2D 繪圖上下文
    """
    canvas = html.CANVAS(width=canvas_width, height=canvas_height)
    brython_div = doc[id]  # 獲取指定 ID 的 DIV
    brython_div &lt;= canvas  # 插入畫布到該 DIV
    ctx = canvas.getContext("2d")
    return canvas, ctx

# 隨機顏色生成器
def random_color():
    """
    返回一個隨機 RGB 顏色
    """
    r = random.randint(0, 255)
    g = random.randint(0, 255)
    b = random.randint(0, 255)
    return f"rgb({r},{g},{b})"

# 判斷點是否在圓內
def is_point_in_circle(px, py, cx, cy, r):
    """
    判斷點 (px, py) 是否在圓心 (cx, cy) 半徑為 r 的圓內
    """
    return (px - cx) ** 2 + (py - cy) ** 2 &lt;= r ** 2

# 繪製三個圓並填充區域
def draw_three_circles(c1, c2, c3):
    """
    使用三個圓的參數進行區域填充。
    c1, c2, c3: 每個圓的參數，格式為 (x, y, r)
    """
    canvas, ctx = initialize_canvas(400, 400)
    ctx.clearRect(0, 0, canvas.width, canvas.height)
    
    color_map = {}
    circles = [c1, c2, c3]
    
    for y in range(canvas.height):
        for x in range(canvas.width):
            # 判斷該點在哪些圓內
            region = tuple(is_point_in_circle(x, y, *circle) for circle in circles)
            
            if region not in color_map:
                color_map[region] = random_color()
            
            ctx.fillStyle = color_map[region]
            ctx.fillRect(x, y, 1, 1)

# 取得三個圓的參數
def get_circle_input():
    """
    模擬獲取三個圓的參數，返回一個圓參數列表
    """
    return [
        (150, 150, 100),  # 圓1 (x, y, r)
        (250, 150, 100),  # 圓2 (x, y, r)
        (200, 250, 100)   # 圓3 (x, y, r)
    ]

# 主程式
def main():
    """
    程式入口，畫出三個圓
    """
    print("開始繪製三個圓的交疊區域...")
    circles = get_circle_input()
    draw_three_circles(*circles)
    print("繪製完成！")

# 執行主程式
main()
</pre>
<p></p>
<h3>w15</h3>
<p>題目一</p>
<p><a href="https://mdecp2024.github.io/hw-LSY41323121/content/Brython.html?src=https://gist.githubusercontent.com/LSY41323121/9b434d02fa800ec286f1e85e9b90b31e/raw/057df54b5f27d53164bedde7df817b725e918c66/hw1.py"><span>從 1 累加到 100</span>  </a></p>
<pre class="brush:py;auto-links:false;toolbar:false" contenteditable="false">sum_result = 0  # 建立變數 sum_result
i = 1  # 指定 i 等於 1
while i &lt;= 100:  # 使用 while 迴圈加總 1 到 100
    sum_result += i
    i += 1
print(sum_result)  # 輸出結果
</pre>
<p><span>題目二</span></p>
<p><a href="https://mdecp2024.github.io/hw-LSY41323121/content/Brython.html?src=https://gist.githubusercontent.com/LSY41323121/693ef5f2121c6f2a49e07c637ebdf311/raw/f6f82b917dbafde278a5500b6be6703e84e1acbf/hw2.py">addto</a></p>
<pre class="brush:py;auto-links:false;toolbar:false" contenteditable="false"># 運算程式
def addto(start, end):   # 定義函數 addto，接受兩個參數 start 和 end
    sum_result = 0       # 設定變數 sum_result，初始值為 0，用於儲存累加結果
    i = start            # 設定變數 i 的初始值為 start，作為計數器
    while i &lt;= end:      # 使用 while 迴圈，條件為 i 小於或等於 end
        sum_result += i  # 將目前的 i 值加到 sum_result 中
        i += 1           # 將 i 的值加 1，進行下一次的迴圈
    return sum_result    # 終止函數運行並返回計算結果 sum_result
     
# 調用程式
result = addto(1, 100)   # 調用函數 addto，設定起始值為 1，結束值為 100
print(result)            # 列印函數返回的結果 result
</pre>
<p>題目三</p>
<p><a href="https://mdecp2024.github.io/hw-LSY41323121/content/Brython.html?src=https://gist.githubusercontent.com/LSY41323121/7db0d7f2cf9331d1ea363c24425c0d8e/raw/197e168b223d83d547b03dbee38f9bf04c7b34e6/hw3.py">add_only_even</a></p>
<pre class="brush:py;auto-links:false;toolbar:false" contenteditable="false">def sum_of_numbers(start, end):
    """
    計算從 start 到 end 的總和

    Args:
        start (int): 起始值
        end (int): 結束值

    Returns:
        int: 從 start 到 end 的總和
    """
    sum_result = 0  # 建立變數 sum_result，初始值為 0
    i = start  # 初始化 i，設為起始值
    while i &lt;= end:  # 使用 while 迴圈，條件為 i 小於或等於結束值
        sum_result += i  # 將 i 累加到 sum_result
        i += 1  # 將 i 的值加 1，進行下一次的迴圈
    return sum_result  # 返回最終的總和

# 呼叫函式並輸出結果
result = sum_of_numbers(1, 100)
print(result)  # 輸出從 1 到 100 的總和 (答案 5050)</pre>
<p><span>題目四</span></p>
<p><a href="https://mdecp2024.github.io/hw-LSY41323121/content/Brython.html?src=https://gist.githubusercontent.com/LSY41323121/99b7a56a531d17b06305a4132e61d100/raw/c5fca01d7efdf563d13fbcc97cbf41361d6fdeeb/hw3.py">add_avoid_8</a></p>
<pre class="brush:py;auto-links:false;toolbar:false" contenteditable="false">def avoid8(init, addto):
    total = 0
    for i in range(init, addto + 1):
        # 判斷數值中是否有 "8"
        if "8" in str(i):
            continue  # 跳過包含 "8" 的數字
        total += i  # 累加不包含 "8" 的數字
    return total  # 返回最終結果

# 測試函式
result = avoid8(1, 100)
print(result)  # 輸出總和，應該是 3763
</pre>
<p><span></span></p>
<p></p>
<pre class="brush:py;auto-links:false;toolbar:false" contenteditable="false"></pre>
<p></p>
<h2>w13</h2>
<div id="brython_div1"></div>
<!-- 導入 brython 程式庫 -->
<p>
<script src="/static/brython.js"></script>
<script src="/static/brython_stdlib.js"></script>
</p>
<!-- 啟動 Brython -->
<p>
<script>
window.onload=function(){
brython({debug:1, pythonpath:['./../cmsimde/static/','./../downloads/py/']});
}
</script>
<script type="text/python3">
from browser import html
from browser import document as doc
 
# 利用 html 建立 canvas 超文件物件
canvas = html.CANVAS(width=400, height=400)
brython_div = doc["brython_div1"]
brython_div <= canvas

ctx = canvas.getContext("2d")
ctx.lineWidth = 1
ctx.strokeStyle = 'red'
ctx.beginPath() 
ctx.rect(0, 0, 200, 200)
ctx.stroke()
</script>
</p>
<h3>w13_hw</h3>
<p></p>
<p><iframe allow="accelerometer; autoplay; clipboard-write; encrypted-media; gyroscope; picture-in-picture; web-share" allowfullscreen="allowfullscreen" frameborder="0" height="480" referrerpolicy="strict-origin-when-cross-origin" src="https://www.youtube.com/embed/ya_XSLoN7Ww" title="41323121 林紹彥 w13_hw 圖形" width="853"></iframe></p>
<p><a href="https://mdecp2024.github.io/hw-LSY41323121/content/Brython.html?src=https://gist.githubusercontent.com/LSY41323121/0f24d3eea3d5fb61a86af4c83992d700/raw/8d457ecb52e70ebb358d86f334c3fb4a0c8e1356/hw1.py">在下兩個正方形外圍, 以黑色畫筆畫圓, 並設法在各線條所圍成的封閉區域塗上不同顏色.</a></p>
<pre class="brush:py;auto-links:false;toolbar:false" contenteditable="false">from browser import html
from browser import document as doc

# 創建畫布元素
canvas = html.CANVAS(width=500, height=500)
brython_div = doc["brython_div1"]
brython_div &lt;= canvas

# 定義圓心中心座標和半徑
x1, y1 = 200, 200  # 第一個圓的中心座標
x2, y2 = 300, 300  # 第二個圓的中心座標
radius = 141.4  # 圓的半徑

ctx = canvas.getContext("2d")

# 繪製第一個圓 (黑色邊框)
ctx.beginPath()
ctx.arc(x1, y1, radius, 0, 2 * 3.14159)
ctx.fillStyle = "yellowgreen"  # 圓的填充顏色
ctx.fill()
ctx.lineWidth = 3
ctx.strokeStyle = "darkorange"  # 圓的邊框顏色
ctx.stroke()

# 繪製第二個圓 (黑色邊框)
ctx.beginPath()
ctx.arc(x2, y2, radius, 0, 2 * 3.14159)
ctx.fillStyle = "salmon"  # 圓的填充顏色
ctx.fill()
ctx.lineWidth = 3
ctx.strokeStyle = "forestgreen"  # 圓的邊框顏色
ctx.stroke()

# 填充第一個和第二個圓的交集區域
ctx.save()
ctx.beginPath()
ctx.arc(x1, y1, radius, 0, 2 * 3.14159)
ctx.clip()  # 剪裁到第一個圓
ctx.beginPath()
ctx.arc(x2, y2, radius, 0, 2 * 3.14159)
ctx.fillStyle = "mediumpurple"  # 交集區域填充顏色
ctx.fill()
ctx.restore()

# 繪製第一個正方形 (紅色邊框，紫色填充)
ctx.beginPath()
ctx.rect(100, 100, 200, 200)
ctx.fillStyle = "orchid"  # 第一個正方形的填充顏色
ctx.fill()
ctx.lineWidth = 3
ctx.strokeStyle = "crimson"  # 第一個正方形的邊框顏色
ctx.stroke()

# 繪製第二個正方形 (紅色邊框，粉色填充)
ctx.beginPath()
ctx.rect(200, 200, 200, 200)
ctx.fillStyle = "hotpink"  # 第二個正方形的填充顏色
ctx.fill()
ctx.strokeStyle = "indianred"  # 第二個正方形的邊框顏色
ctx.stroke()

# 繪製斜線 (藍色)
ctx.beginPath()
ctx.moveTo(100, 100)
ctx.lineTo(300, 300)
ctx.strokeStyle = "royalblue"  # 斜線顏色
ctx.lineWidth = 3
ctx.stroke()

# 繪製圓的邊框 (黑色邊框)
ctx.beginPath()
ctx.arc(x1, y1, radius, 0, 2 * 3.14159)
ctx.strokeStyle = "darkorange"  # 圓的邊框顏色
ctx.stroke()

ctx.beginPath()
ctx.arc(x2, y2, radius, 0, 2 * 3.14159)
ctx.strokeStyle = "forestgreen"  # 圓的邊框顏色
ctx.stroke()
</pre>
<div id="brython_div1"></div>
<p></p>
<p></p>
<p>
<script type="text/python3">
from browser import html
from browser import document as doc
 
# 利用 html 建立 canvas 超文件物件
canvas = html.CANVAS(width=400, height=400)
brython_div = doc["brython_div1"]
brython_div <= canvas

ctx = canvas.getContext("2d")
ctx.lineWidth = 1

ctx.strokeStyle = 'blue'
ctx.beginPath() 
ctx.moveTo(10,10)
ctx.lineTo(210,210)
ctx.stroke()
</script>
</p>
<h1>HW 2</h1>
<h2>HW 2 Exam</h2>
<h3>w16_exam1</h3>
<p><span>題目:</span><span>請以</span><span>自己的學號最後四碼</span><span>作為繪圖的座標原點, (例如: 若學號最後四碼為 3932, 請將 (39, 32) 作為繪圖座標原點), 並以 pixel=2 的黑色直線分別利用 Brython 繪圖, 標示出向右為正的 X 軸, 以及向下為正的 Y 軸, 並且利用文字標示出原點座標 (例如: (39, 32)), 之後請自選最左側圖形的起始點座標, 直接在頁面畫出下列圖像, 繪圖程式除了必須直接列在頁面 html 檔案外, 也請存入自己的 Gist 區域, 並在所完成的圖像下方, 以自選標題的 anchor 連結至 Gist, 讓使用者點擊該連結後, 可以在各自的 Brython 頁面中繪出下列圖像</span></p>
<p><a href="https://mdecp2024.github.io/hw-LSY41323121/content/Brython.html?src=https://gist.githubusercontent.com/LSY41323121/2dcf35f88b3ec908cccbce746bbcd666/raw/5223e89862b107101a31213c6cf22a7ce4a73aa9/hw1.py"> "w16_exam1"</a></p>
<p><iframe allow="accelerometer; autoplay; clipboard-write; encrypted-media; gyroscope; picture-in-picture; web-share" allowfullscreen="allowfullscreen" frameborder="0" height="480" referrerpolicy="strict-origin-when-cross-origin" src="https://www.youtube.com/embed/5CN8oOCiUds" title="41323121 四設計一甲 林紹彥 w16_exam1" width="853"></iframe></p>
<p></p>
<p></p>
<p></p>
<p></p>
<p></p>
<p></p>
<div id="brython_div1"></div>
<!-- 導入 brython 程式庫 -->
<p>
<script src="/static/brython.js"></script>
<script src="/static/brython_stdlib.js"></script>
</p>
<!-- 啟動 Brython -->
<p>
<script>
window.onload=function(){
    brython({debug:1, pythonpath:['./../cmsimde/static/','./../downloads/py/']});
}
</script>
<script type="text/python3">
from browser import html
from browser import document as doc

# 利用 html 建立 canvas 超文件物件
canvas = html.CANVAS(width=500, height=500)
brython_div = doc["brython_div1"]
brython_div <= canvas

# 取得 canvas 的繪圖上下文
ctx = canvas.getContext("2d")

# 畫出 X 軸
ctx.beginPath()
ctx.strokeStyle = 'black'
ctx.lineWidth = 2
ctx.moveTo(31, 21)  # 新的原點
ctx.lineTo(400, 21)  # 向右延伸
ctx.stroke()

# 畫出 Y 軸
ctx.beginPath()
ctx.moveTo(31, 21)  # 新的原點
ctx.lineTo(31, 400)  # 向下延伸
ctx.stroke()

# 標示原點座標
ctx.font = "12px Arial"
ctx.fillStyle = "black"
ctx.fillText("(31, 21)", 35, 34)

# 位移偏移量，將原點 (31, 21) 作為新的繪圖基準
offset_x = 31
offset_y = 21

# 畫橙色六邊形
ctx.beginPath()
ctx.fillStyle = "#F47920"
ctx.moveTo(offset_x + 40, offset_y + 42)  # (40, 42)
ctx.lineTo(offset_x + 60, offset_y + 12)  # (60, 12)
ctx.lineTo(offset_x + 90, offset_y + 12)  # (90, 12)
ctx.lineTo(offset_x + 110, offset_y + 42)  # (110, 42)
ctx.lineTo(offset_x + 90, offset_y + 72)  # (90, 72)
ctx.lineTo(offset_x + 60, offset_y + 72)  # (60, 72)
ctx.closePath()
ctx.fill()

# 畫綠色菱形
ctx.beginPath()
ctx.fillStyle = "#009F95"
ctx.moveTo(offset_x + 130, offset_y + 42)  # (130, 42)
ctx.lineTo(offset_x + 150, offset_y + 12)  # (150, 12)
ctx.lineTo(offset_x + 170, offset_y + 42)  # (170, 42)
ctx.lineTo(offset_x + 150, offset_y + 72)  # (150, 72)
ctx.closePath()
ctx.fill()

# 藍色三角形 (頂點在菱形右側，方向朝下)
ctx.beginPath()
ctx.fillStyle = "#40B4CB"
ctx.moveTo(offset_x + 174, offset_y + 42)  # (174, 42)
ctx.lineTo(offset_x + 154, offset_y + 72)  # (154, 72)
ctx.lineTo(offset_x + 194, offset_y + 72)  # (194, 72)
ctx.closePath()
ctx.fill()

# 畫粉紅色圓形
ctx.beginPath()
ctx.fillStyle = "#EB008B"
ctx.arc(offset_x + 220, offset_y + 42, 20, 0, 2 * 3.14159)  # (220, 42)
ctx.fill()

# 畫黃色正方形
ctx.beginPath()
ctx.fillStyle = "#FDD56A"
ctx.rect(offset_x + 260, offset_y + 22, 40, 40)  # (260, 22)
ctx.fill()

# 畫藍色矩形
ctx.beginPath()
ctx.fillStyle = "#003A70"
ctx.rect(offset_x + 320, offset_y + 32, 60, 20)  # (320, 32)
ctx.fill()
</script>
</p>
<h1>HW 3</h1>
<h2>w16_exam2</h2>
<p><span>題目一: 請以</span><span>自己的學號最後四碼</span><span>作為下列繪圖的左上方點座標, (例如: 若學號最後四碼為 3932, 請將 (39, 32) 作為繪圖左上方點座標), 並以紅色文字標示出該點座標 (例如: (39, 32)), 之後請利用 </span><span>pixel=2 的藍色直線</span><span>, </span><span>自訂迷宮畫布大小</span><span>, 直接在頁面畫出下列圖像, 繪圖程式除了必須直接列在頁面 html 檔案外, 也請存入自己的 Gist 區域, 並在所完成的圖像下方, 以自選標題的 anchor 連結至 Gist, 讓使用者點擊該連結後, 可以在各自的 Brython 頁面中繪出下列圖像).</span></p>
<p><a href="https://mdecp2024.github.io/hw-LSY41323121/content/Brython.html?src=https://gist.githubusercontent.com/LSY41323121/3b1e96630c957b291a251284ddf5c7c1/raw/4977aee47cd4368b56c233fc2410cd7203b60450/hw1.py">w16_exam2</a></p>
<pre class="brush:py;auto-links:false;toolbar:false" contenteditable="false">from browser import html
from browser import document as doc

canvas = html.CANVAS(width=500, height=500)
brython_div = doc["brython_div1"]
brython_div &lt;= canvas

ctx = canvas.getContext("2d")

# 畫線的工具函數，設定線條顏色和粗細，然後畫出一條直線
def draw_line(x1, y1, x2, y2, line_width=2, stroke_style="black"):
    ctx.lineWidth = line_width
    ctx.strokeStyle = stroke_style
    ctx.beginPath()
    ctx.moveTo(x1, y1)
    ctx.lineTo(x2, y2)
    ctx.stroke()

# 在藍線左邊第一條和上面第一條附近標記文字
ctx.font = "20px Arial"
ctx.fillStyle = "red"
ctx.fillText("(31,21)", 31 + 120, 21 + 15)

# 繪製藍色多條線條，左上角從(31, 21)開始
blue_start_x = 31
blue_start_y = 21

def draw_blue_rectangles(x, y, scale):
    # 外圍矩形
    draw_line(x + 150 * scale, y + 40 * scale, x + 190 * scale, y + 40 * scale, stroke_style="blue")
    draw_line(x + 210 * scale, y + 40 * scale, x + 250 * scale, y + 40 * scale, stroke_style="blue")
    draw_line(x + 250 * scale, y + 40 * scale, x + 250 * scale, y + 140 * scale, stroke_style="blue")
    draw_line(x + 250 * scale, y + 140 * scale, x + 210 * scale, y + 140 * scale, stroke_style="blue")
    draw_line(x + 190 * scale, y + 140 * scale, x + 150 * scale, y + 140 * scale, stroke_style="blue")
    draw_line(x + 150 * scale, y + 140 * scale, x + 150 * scale, y + 40 * scale, stroke_style="blue")

    # 內部矩形
    draw_line(x + 170 * scale, y + 60 * scale, x + 230 * scale, y + 60 * scale, stroke_style="blue")
    draw_line(x + 230 * scale, y + 60 * scale, x + 230 * scale, y + 80 * scale, stroke_style="blue")
    draw_line(x + 190 * scale, y + 60 * scale, x + 190 * scale, y + 80 * scale, stroke_style="blue")
    draw_line(x + 190 * scale, y + 80 * scale, x + 150 * scale, y + 80 * scale, stroke_style="blue")
    draw_line(x + 210 * scale, y + 80 * scale, x + 210 * scale, y + 100 * scale, stroke_style="blue")
    draw_line(x + 210 * scale, y + 100 * scale, x + 230 * scale, y + 100 * scale, stroke_style="blue")
    draw_line(x + 230 * scale, y + 100 * scale, x + 230 * scale, y + 140 * scale, stroke_style="blue")
    draw_line(x + 190 * scale, y + 80 * scale, x + 170 * scale, y + 80 * scale, stroke_style="blue")
    draw_line(x + 170 * scale, y + 120 * scale, x + 170 * scale, y + 100 * scale, stroke_style="blue")
    draw_line(x + 170 * scale, y + 100 * scale, x + 210 * scale, y + 100 * scale, stroke_style="blue")
    draw_line(x + 190 * scale, y + 140 * scale, x + 190 * scale, y + 120 * scale, stroke_style="blue")
    draw_line(x + 190 * scale, y + 120 * scale, x + 210 * scale, y + 120 * scale, stroke_style="blue")

scale = 1  # 你可以更改這個數字來調整縮放比例
draw_blue_rectangles(blue_start_x, blue_start_y, scale)
</pre>
<p></p>
<p><iframe allow="accelerometer; autoplay; clipboard-write; encrypted-media; gyroscope; picture-in-picture; web-share" allowfullscreen="allowfullscreen" frameborder="0" height="480" referrerpolicy="strict-origin-when-cross-origin" src="https://www.youtube.com/embed/6Su-P4XNJ_c" title="四設計一甲  林紹彥 41323121  w16_exam2" width="853"></iframe></p>
<div id="brython_div1"></div>
<!-- 導入 brython 程式庫 -->
<p>
<script src="/static/brython.js"></script>
<script src="/static/brython_stdlib.js"></script>
</p>
<!-- 啟動 Brython -->
<p>
<script>
window.onload=function(){
    brython({debug:1, pythonpath:['./../cmsimde/static/','./../downloads/py/']});
}
</script>
<script type="text/python3">
from browser import html
from browser import document as doc

# 利用 html 建立 canvas 超文件物件
canvas = html.CANVAS(width=500, height=500)
brython_div = doc["brython_div1"]
brython_div <= canvas

# 取得 canvas 的繪圖上下文
ctx = canvas.getContext("2d")
from browser import html
from browser import document as doc

canvas = html.CANVAS(width=500, height=500)
brython_div = doc["brython_div1"]
brython_div <= canvas

ctx = canvas.getContext("2d")

# 畫線的工具函數，設定線條顏色和粗細，然後畫出一條直線
def draw_line(x1, y1, x2, y2, line_width=2, stroke_style="black"):
    ctx.lineWidth = line_width
    ctx.strokeStyle = stroke_style
    ctx.beginPath()
    ctx.moveTo(x1, y1)
    ctx.lineTo(x2, y2)
    ctx.stroke()

# 在藍線左邊第一條和上面第一條附近標記文字
ctx.font = "20px Arial"
ctx.fillStyle = "red"
ctx.fillText("(31,21)", 31 + 120, 21 + 15)

# 繪製藍色多條線條，左上角從(31, 21)開始
blue_start_x = 31
blue_start_y = 21

def draw_blue_rectangles(x, y, scale):
    # 外圍矩形
    draw_line(x + 150 * scale, y + 40 * scale, x + 190 * scale, y + 40 * scale, stroke_style="blue")
    draw_line(x + 210 * scale, y + 40 * scale, x + 250 * scale, y + 40 * scale, stroke_style="blue")
    draw_line(x + 250 * scale, y + 40 * scale, x + 250 * scale, y + 140 * scale, stroke_style="blue")
    draw_line(x + 250 * scale, y + 140 * scale, x + 210 * scale, y + 140 * scale, stroke_style="blue")
    draw_line(x + 190 * scale, y + 140 * scale, x + 150 * scale, y + 140 * scale, stroke_style="blue")
    draw_line(x + 150 * scale, y + 140 * scale, x + 150 * scale, y + 40 * scale, stroke_style="blue")

    # 內部矩形
    draw_line(x + 170 * scale, y + 60 * scale, x + 230 * scale, y + 60 * scale, stroke_style="blue")
    draw_line(x + 230 * scale, y + 60 * scale, x + 230 * scale, y + 80 * scale, stroke_style="blue")
    draw_line(x + 190 * scale, y + 60 * scale, x + 190 * scale, y + 80 * scale, stroke_style="blue")
    draw_line(x + 190 * scale, y + 80 * scale, x + 150 * scale, y + 80 * scale, stroke_style="blue")
    draw_line(x + 210 * scale, y + 80 * scale, x + 210 * scale, y + 100 * scale, stroke_style="blue")
    draw_line(x + 210 * scale, y + 100 * scale, x + 230 * scale, y + 100 * scale, stroke_style="blue")
    draw_line(x + 230 * scale, y + 100 * scale, x + 230 * scale, y + 140 * scale, stroke_style="blue")
    draw_line(x + 190 * scale, y + 80 * scale, x + 170 * scale, y + 80 * scale, stroke_style="blue")
    draw_line(x + 170 * scale, y + 120 * scale, x + 170 * scale, y + 100 * scale, stroke_style="blue")
    draw_line(x + 170 * scale, y + 100 * scale, x + 210 * scale, y + 100 * scale, stroke_style="blue")
    draw_line(x + 190 * scale, y + 140 * scale, x + 190 * scale, y + 120 * scale, stroke_style="blue")
    draw_line(x + 190 * scale, y + 120 * scale, x + 210 * scale, y + 120 * scale, stroke_style="blue")

scale = 1  # 你可以更改這個數字來調整縮放比例
draw_blue_rectangles(blue_start_x, blue_start_y, scale)
</script>
</p>
<h2>HW 3 Exam</h2>
<p>每六人為一組進行協同程式練習</p>
<p>透過 Jupyterlab 協同網頁, 輪流指定各組編寫 HW 3 相關的程式練習, 以及網頁內容 (localhost 與 Codespaces 環境)編輯.</p>
<h1>HW 4</h1>
<h4>主題: 利用 Python 控制機電模擬系統 (20%)</h4>
<p style="padding-left: 30px;">利用 <a href="https://solvespace.com/">https://solvespace.com/</a> 建立機械系統零組件</p>
<p style="padding-left: 30px;">利用 <a href="https://www.coppeliarobotics.com/">CoppeliaSim</a> 建立機電模擬系統</p>
<p style="padding-left: 30px;">利用 <a href="https://manual.coppeliarobotics.com/en/zmqRemoteApiOverview.htm">Python</a> 跨網路控制瀏覽器上的機電模擬系統</p>
<p style="padding-left: 30px;">範例:</p>
<p style="padding-left: 60px;"><a href="/downloads/cd2023_pj3ag4_zmq_football_4.7.7z">cd2023_pj3ag4_zmq_football_4.7.7z</a></p>
<p style="padding-left: 60px;"><a href="https://localhost:9446/downloads/cd2024_2b_g6_steel_ball_platform_nxopen_copsim.7z">cd2024_2b_g6_steel_ball_platform_nxopen_copsim.7z</a></p>
<p>完成上述流程整理後, 請將 HW4 自評分數輸入 cp2024 自評表單中.</p>
<h2>HW 4 Exam</h2>
<h3>w16_exam3</h3>
<p>每六人為一組進行協同程式練習</p>
<p>透過 Jupyterlab 協同網頁, 輪流指定各組編寫 HW 4 相關的程式練習, 以及網頁內容 (localhost 與 Codespaces 環境)編輯.</p>
<p><a href="https://mdecp2024.github.io/hw-LSY41323121/content/Brython.html?src=https://gist.githubusercontent.com/LSY41323121/10bfa72ca9571014cafe8ab272872be9/raw/1837f24c5437dd58e2d9a2e3f4064d62da593ff5/hw1.py">迷宮出口</a></p>
<p><iframe allow="accelerometer; autoplay; clipboard-write; encrypted-media; gyroscope; picture-in-picture; web-share" allowfullscreen="allowfullscreen" frameborder="0" height="480" referrerpolicy="strict-origin-when-cross-origin" src="https://www.youtube.com/embed/6Su-P4XNJ_c" title="四設計一甲  林紹彥 41323121  w16_exam2" width="853"></iframe></p>
<pre class="brush:py;auto-links:false;toolbar:false" contenteditable="false">from browser import html
from browser import document as doc
 
# 設定迷宮畫布大小
canvas = html.CANVAS(width=300, height=300)
brython_div = doc["brython_div1"]
brython_div &lt;= canvas
 
# 取得 canvas 的繪圖上下文
ctx = canvas.getContext("2d")
 
# 標示左上方點座標 (31, 21)
ctx.font = "12px Arial"
ctx.fillStyle = "red"
ctx.fillText("(31, 21)", 35, 35)
 
# 定義藍色線條的屬性
ctx.strokeStyle = "black"
ctx.lineWidth = 2
 
# 設定迷宮起點的偏移量
offset_x, offset_y = 31, 21
 
# 迷宮的線條座標
maze_lines = [
    ((0, 0), (86, 0)),
    ((0, 0), (0, 200)),
    ((120, 0), (200, 0)),
    ((200, 0), (200, 200)),
    ((120, 200), (200, 200)),
    ((0, 200), (86, 200)),
    ((86, 157), (86, 200)),
    ((86, 157), (126, 157)),
    ((160, 120), (160, 200)),
    ((160, 120), (50, 120)),
    ((50, 120), (50, 163)),
    ((126, 80), (126, 120)),
    ((0, 80), (86, 80)),
    ((86, 40), (86, 80)),
    ((40, 40), (160, 40)),
    ((160, 40), (160, 83)),
]
 
# 使用輔助函數來簡化畫線的過程
def draw_line(start, end):
    ctx.moveTo(offset_x + start[0], offset_y + start[1])
    ctx.lineTo(offset_x + end[0], offset_y + end[1])
 
# 繪製迷宮
ctx.beginPath()
for start, end in maze_lines:
    draw_line(start, end)
ctx.stroke()
 
# 定義紅色路徑屬性
ctx.strokeStyle = "red"
ctx.lineWidth = 3
 
# 解答路徑
path_solution = [
    (100, 0),    
    (100, 20),   
    (180, 20),  
    (180, 100),  
    (140, 100), 
    (140, 60), 
    (100, 60),
    (100, 100),
    (25, 100),
    (25, 180),
    (65, 180),
    (65, 140),
    (140, 140),
    (140, 180),
    (100, 180),
    (100, 200),
]
 
# 繪製紅色路徑
ctx.beginPath()
for i in range(len(path_solution) - 1):
    start = path_solution[i]
    end = path_solution[i + 1]
    draw_line(start, end)
ctx.stroke()
</pre>
<p></p>
<div id="brython_div1"></div>
<!-- 導入 brython 程式庫 -->
<p>
<script src="/static/brython.js"></script>
<script src="/static/brython_stdlib.js"></script>
</p>
<!-- 啟動 Brython -->
<p>
<script>
window.onload=function(){
    brython({debug:1, pythonpath:['./../cmsimde/static/','./../downloads/py/']});
}
</script>
<script type="text/python3">
from browser import html
from browser import document as doc

# 利用 html 建立 canvas 超文件物件
canvas = html.CANVAS(width=500, height=500)
brython_div = doc["brython_div1"]
brython_div <= canvas

# 取得 canvas 的繪圖上下文
ctx = canvas.getContext("2d")
from browser import html
from browser import document as doc
 
# 設定迷宮畫布大小
canvas = html.CANVAS(width=300, height=300)
brython_div = doc["brython_div1"]
brython_div <= canvas
 
# 取得 canvas 的繪圖上下文
ctx = canvas.getContext("2d")
 
# 標示左上方點座標 (31, 21)
ctx.font = "12px Arial"
ctx.fillStyle = "red"
ctx.fillText("(31, 21)", 35, 35)
 
# 定義藍色線條的屬性
ctx.strokeStyle = "black"
ctx.lineWidth = 2
 
# 設定迷宮起點的偏移量
offset_x, offset_y = 31, 21
 
# 迷宮的線條座標
maze_lines = [
    ((0, 0), (86, 0)),
    ((0, 0), (0, 200)),
    ((120, 0), (200, 0)),
    ((200, 0), (200, 200)),
    ((120, 200), (200, 200)),
    ((0, 200), (86, 200)),
    ((86, 157), (86, 200)),
    ((86, 157), (126, 157)),
    ((160, 120), (160, 200)),
    ((160, 120), (50, 120)),
    ((50, 120), (50, 163)),
    ((126, 80), (126, 120)),
    ((0, 80), (86, 80)),
    ((86, 40), (86, 80)),
    ((40, 40), (160, 40)),
    ((160, 40), (160, 83)),
]
 
# 使用輔助函數來簡化畫線的過程
def draw_line(start, end):
    ctx.moveTo(offset_x + start[0], offset_y + start[1])
    ctx.lineTo(offset_x + end[0], offset_y + end[1])
 
# 繪製迷宮
ctx.beginPath()
for start, end in maze_lines:
    draw_line(start, end)
ctx.stroke()
 
# 定義紅色路徑屬性
ctx.strokeStyle = "red"
ctx.lineWidth = 3
 
# 解答路徑
path_solution = [
    (100, 0),    
    (100, 20),   
    (180, 20),  
    (180, 100),  
    (140, 100), 
    (140, 60), 
    (100, 60),
    (100, 100),
    (25, 100),
    (25, 180),
    (65, 180),
    (65, 140),
    (140, 140),
    (140, 180),
    (100, 180),
    (100, 200),
]
 
# 繪製紅色路徑
ctx.beginPath()
for i in range(len(path_solution) - 1):
    start = path_solution[i]
    end = path_solution[i + 1]
    draw_line(start, end)
ctx.stroke()
</script>
</p><h1>Final Report</h1>
<p>期末口頭與書面專題報告 (20%)</p>
<p>期末口頭專題報告影片:</p>
<p style="padding-left: 30px;">......</p>
<p>期末書面專題報告檔案 (pdf):</p>
<p style="padding-left: 30px;">......</p>
<p>電腦輔助設計與實習課程總結心得:</p>
<p style="padding-left: 30px;">......</p>
<p>期末報告自評成績:</p>
<p style="padding-left: 30px;">完成上述流程後, 請將 Final Report 自評分數輸入 cp2024 自評表單中.</p>
<h1>Brython</h1>
<p>從 1 累加到 100:</p>
<p><button id="add1to100">1 add to 100</button></p>
<!-- 導入 brython 程式庫 -->
<p>
<script src="/static/brython.js"></script>
<script src="/static/brython_stdlib.js"></script>
</p>
<!-- 啟動 Brython -->
<p>
<script>
window.onload=function(){
brython({debug:1, pythonpath:['/static/','./../downloads/py/']});
}
</script>
</p>
<p><!-- 導入 FileSaver 與 filereader --></p>
<p>
<script src="/static/ace/FileSaver.min.js" type="text/javascript"></script>
<script src="/static/ace/filereader.js" type="text/javascript"></script>
</p>
<p><!-- 導入 ace --></p>
<p>
<script src="/static/ace/ace.js" type="text/javascript"></script>
<script src="/static/ace/ext-language_tools.js" type="text/javascript"></script>
<script src="/static/ace/mode-python3.js" type="text/javascript"></script>
<script src="/static/ace/snippets/python.js" type="text/javascript"></script>
</p>
<p><!-- 導入 gearUtils-0.9.js Cango 齒輪繪圖程式庫 -->
<script src="/static/Cango-24v03-min.js"></script>
<script src="/static/gearUtils-09.js"></script>
<script src="/static/SVGpathUtils-6v03-min.js"></script>
<script src="/static/sylvester.js"></script>
<script src="/static/PrairieDraw.js"></script>
</p>
<p><!-- 請注意, 這裡使用 Javascript 將 localStorage["kw_py_src1"] 中存在近端瀏覽器的程式碼, 由使用者決定存檔名稱--></p>
<p>
<script type="text/javascript">
function doSave(storage_id, filename){
    var blob = new Blob([localStorage[storage_id]], {type: "text/plain;charset=utf-8"});
    filename = document.getElementById(filename).value
    saveAs(blob, filename+".py");
}
</script>
</p>
<p>
<script type="text/python3">
from browser import document as doc
import ace
# 清除畫布
def clear_bd1(ev):
    bd = doc["brython_div1"]
    bd.clear()
Ace1 = ace.Editor(editor_id="kw_editor1", console_id="kw_console1", container_id="kw__container1", storage_id="kw_py_src1" )
# 從 gist 取出程式碼後, 放入 editor 作為 default 程式
def run1():
    # 利用 get 取下 src 變數值
    try:
        url = doc.query["src"]
    except:
        url = "https://gist.githubusercontent.com/mdecourse/0229a8a017091476a79700b8a190f185/raw/c3a6deaf717f8f2739a4b1392a5ab10936e9693a/from_1_add_to_10_1.py"
    prog = open(url).read()

    # 將程式載入編輯區
    Ace1.editor.setValue(prog)
    Ace1.editor.scrollToRow(0)
    Ace1.editor.gotoLine(0)
    # 直接執行程式
    #ns = {'__name__':'__main__'}
    #exec(prog, ns)
    # 按下 run 按鈕
    Ace1.run()

# 執行程式, 顯示輸出結果與清除輸出結果及對應按鈕綁定
doc['kw_run1'].bind('click', Ace1.run)
doc['kw_show_console1'].bind('click', Ace1.show_console)
doc['kw_clear_console1'].bind('click', Ace1.clear_console)
doc['clear_bd1'].bind('click', clear_bd1)
# 呼叫函式執行
run1()
</script>
</p>
<p><!-- add 1 to 100 開始 -->
<script type="text/python3">
from browser import document as doc
import ace

# 清除畫布
def clear_bd1(ev):
    bd = doc["brython_div1"]
    bd.clear()

# 利用 ace 中的 Editor 建立 Ace2 物件, 其中的輸入變數分別對應到頁面中的編輯區物件
Ace2 = ace.Editor(editor_id="kw_editor1", console_id="kw_console1", container_id="kw__container1", storage_id="kw_py_src1" )

add1to100_url = "https://gist.githubusercontent.com/mdecourse/0229a8a017091476a79700b8a190f185/raw/c48e37714f055c3a0027cbfef59e442a6ef659b9/from_1_add_to_100_1.py"

# 從 gist 取得程式碼
add_src = open(add1to100_url).read()
def add(ev):
    Ace2.editor.setValue(add_src)
    Ace2.editor.scrollToRow(0)
    Ace2.editor.gotoLine(0)
    Ace2.run()

# id 為 "add1to100" 的按鈕點按時, 執行 add 方法
doc["add1to100"].bind('click', add)
</script>
</p>
<p><!-- add 1 to 100 結束--></p>
<!-- editor1 開始 -->
<p><!-- 用來顯示程式碼的 editor 區域 --></p>
<div id="kw_editor1" style="width: 600px; height: 300px;"></div>
<p><!-- 以下的表單與按鈕與前面的 Javascript doSave 函式以及 FileSaver.min.js 互相配合 --></p>
<p><!-- 存擋表單開始 --></p>
<form><label>Filename: <input id="kw_filename" placeholder="input file name" type="text"/>.py</label> <input onclick="doSave('kw_py_src1', 'kw_filename1');" type="submit" value="Save"/></form>
<p><!-- 存擋表單結束 --></p>
<p></p>
<p><!-- 執行與清除按鈕開始 --></p>
<p><button id="kw_run1">Run</button> <button id="kw_show_console1">Output</button> <button id="kw_clear_console1">清除輸出區</button><button id="clear_bd1">清除繪圖區</button><button onclick="window.location.reload()">Reload</button></p>
<p><!-- 執行與清除按鈕結束 --></p>
<p></p>
<p><!-- 程式執行 ouput 區 --></p>
<div style="width: 100%; height: 100%;"><textarea autocomplete="off" id="kw_console1"></textarea></div>
<p><!-- Brython 程式執行的結果, 都以 brython_div1 作為切入位置 --></p>
<div id="brython_div1"></div>
<!-- editor1 結束 --><hr/><!-- ########################################## -->
<p>從 1 累加到 100 part2:</p>
<p><button id="add1to100part2">1 add to 100</button><button id="cango_three_gears">cango_three_gears</button><button id="bsnake">BSnake</button><button id="aitetris">AI Tetris</button><button id="threejsblock">Rotating Block</button></p>
<p><!-- 請注意, 這裡使用 Javascript 將 localStorage["kw_py_src2"] 中存在近端瀏覽器的程式碼, 由使用者決定存檔名稱--></p>
<p>
<script type="text/python3">
from browser import document as doc
import ace
# 清除畫布
def clear_bd2(ev):
    bd = doc["brython_div2"]
    bd.clear()
Ace3 = ace.Editor(editor_id="kw_editor2", console_id="kw_console2", container_id="kw__container2", storage_id="kw_py_src2" )
# 從 gist 取出程式碼後, 放入 editor 作為 default 程式
def run2():
    # 利用 get 取下 src 變數值
    try:
        url = doc.query["src2"]
    except:
        url = "https://gist.githubusercontent.com/mdecourse/0229a8a017091476a79700b8a190f185/raw/c3a6deaf717f8f2739a4b1392a5ab10936e9693a/from_1_add_to_10_1.py"
    prog = open(url).read()

    # 將程式載入編輯區
    Ace3.editor.setValue(prog)
    Ace3.editor.scrollToRow(0)
    Ace3.editor.gotoLine(0)
    # 直接執行程式
    #ns = {'__name__':'__main__'}
    #exec(prog, ns)
    # 按下 run 按鈕
    Ace3.run()

# 執行程式, 顯示輸出結果與清除輸出結果及對應按鈕綁定
doc['kw_run2'].bind('click', Ace3.run)
doc['kw_show_console2'].bind('click', Ace3.show_console)
doc['kw_clear_console2'].bind('click', Ace3.clear_console)
doc['clear_bd2'].bind('click', clear_bd2)
# 呼叫函式執行
run2()
</script>
</p>
<p><!-- add 1 to 100 part2 開始 -->
<script type="text/python3">
from browser import document as doc
import ace

# 清除畫布
def clear_bd2(ev):
    bd = doc["brython_div2"]
    bd.clear()

# 利用 ace 中的 Editor 建立 Ace2 物件, 其中的輸入變數分別對應到頁面中的編輯區物件
Ace4 = ace.Editor(editor_id="kw_editor2", console_id="kw_console2", container_id="kw__container2", storage_id="kw_py_src2" )

# 透過 Ace4 以類別建立一個通用的 button2, 可以在多個案例中將 gist 程導入編輯區

class button2:
    def __init__(self, url):
        self.url = url

    # 記得加入 event 輸入變數
    def do(self,ev):
        Ace4.editor.setValue(open(self.url).read())
        Ace4.editor.scrollToRow(0)
        Ace4.editor.gotoLine(0)
        Ace4.run()

add1to100_url = "https://gist.githubusercontent.com/mdecourse/0229a8a017091476a79700b8a190f185/raw/c48e37714f055c3a0027cbfef59e442a6ef659b9/from_1_add_to_100_1.py"

# 從 gist 取得程式碼
add_src = open(add1to100_url).read()
def add2(ev):
    Ace4.editor.setValue(add_src)
    Ace4.editor.scrollToRow(0)
    Ace4.editor.gotoLine(0)
    Ace4.run()

# id 為 "add1to100part2" 的按鈕點按時, 執行 add 方法
doc["add1to100part2"].bind('click', add2)
# 以下為運用 button2 class 的通用 gist 程式導入區
################################## cango_three_gears start
cango_three_gears_url = "https://gist.githubusercontent.com/mdecycu/d9082d678096bd58378d6afe2c7fa05d/raw/f7a85d737d6723d5e34c526d5daee990ed92c32b/cango_three_gears_brython_div2.py"
cango_three_gears = button2(cango_three_gears_url)
doc["cango_three_gears"].bind("click", cango_three_gears.do)
################################## cango_three_gears end
################################## bsnake start
bsnake_url = "https://gist.githubusercontent.com/mdecycu/d9082d678096bd58378d6afe2c7fa05d/raw/f7a85d737d6723d5e34c526d5daee990ed92c32b/kmol_snakey.py"
bsnake = button2(bsnake_url)
doc["bsnake"].bind("click", bsnake.do)
################################## bsnake end
################################## aitetris start
aitetris_url = "https://gist.githubusercontent.com/mdecycu/d9082d678096bd58378d6afe2c7fa05d/raw/f7a85d737d6723d5e34c526d5daee990ed92c32b/pygame_to_brython_tetris_ai.py"
aitetris = button2(aitetris_url)
doc["aitetris"].bind("click", aitetris.do)
################################## aitetris end
################################## threejsblock start
threejsblock_url = "https://gist.githubusercontent.com/mdecycu/2c6323eff49b496d1bafd210f3ec9707/raw/df37802f9e8a386b6424f7945af622b1cd0a9ca5/threejs_rotating_block.py"
threejsblock = button2(threejsblock_url)
doc["threejsblock"].bind("click", threejsblock.do)
################################## threejsblock end
</script>
</p>
<p><!-- add 1 to 100 part2 結束--></p>
<!-- editor2 開始 -->
<p><!-- 用來顯示程式碼的 editor 區域 --></p>
<div id="kw_editor2" style="width: 600px; height: 300px;"></div>
<p><!-- 以下的表單與按鈕與前面的 Javascript doSave 函式以及 FileSaver.min.js 互相配合 --></p>
<p><!-- 存擋表單開始 --></p>
<form><label>Filename: <input id="kw_filename2" placeholder="input file name" type="text"/>.py</label> <input onclick="doSave('kw_py_src2', 'kw_filename2');" type="submit" value="Save"/></form>
<p><!-- 存擋表單結束 --></p>
<p></p>
<p><!-- 執行與清除按鈕開始 --></p>
<p><button id="kw_run2">Run</button> <button id="kw_show_console2">Output</button> <button id="kw_clear_console2">清除輸出區</button><button id="clear_bd2">清除繪圖區</button><button onclick="window.location.reload()">Reload</button></p>
<p><!-- 執行與清除按鈕結束 --></p>
<p></p>
<p><!-- 程式執行 ouput 區 --></p>
<div style="width: 100%; height: 100%;"><textarea autocomplete="off" id="kw_console2"></textarea></div>
<p><!-- Brython 程式執行的結果, 都以 brython_div1 作為切入位置 --></p>
<div id="brython_div2"></div>
<!-- editor2 結束 --><hr/>
<p>
<script src="https://unpkg.com/three@0.144.0/build/three.js" type="text/javascript"></script>
</p>