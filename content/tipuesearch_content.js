var tipuesearch = {"pages": [{'title': 'About', 'text': '國立虎尾科技大學機械設計工程系 \n National Formosa University \n Department of Mechanical Design Engineering \n cp2024 計算機程式 \n 課程教材: \n Learn Python with Jupyter  ( site ,  ebook ) \n 教育版帳號 microsoftonline 登入點:  https://login.microsoftonline.com/ \n Teams 線上教學: \n 以 "學號@nfu.edu.tw" 登入  https://login.microsoftonline.com/  Office 365 \n Teams 團隊代碼:  ldodwua \n 個人倉儲: mdecp2024/hw-LSY41323121: mdecp2024-hw-cp2024_hw created by GitHub Classroom \n 個人網頁: https://mdecp2024.github.io/hw-LSY41323121/content/About.html \n 其他資訊: cp_hw (mdecp2024.github.io) \n cd2023_pj3ag4_zmq_football_4.7.7z \n cd2024_2b_g6_steel_ball_platform_nxopen_copsim.7z \n', 'tags': '', 'url': 'About.html'}, {'title': 'Attendance', 'text': '出席 (10%) - 自行舉證評分 \n 自行利用 Github commits 提交記錄評分. \n', 'tags': '', 'url': 'Attendance.html'}, {'title': 'HW 1', 'text': '主題: 基於瀏覽器的分散式版次管理與整合程式開發環境 (10%) \n USB 隨身碟: \n 下載  python_2025_lite.7z  (428 MB, 解開壓縮後約 1.5 GB) \n Jupyter \n What are Github and Codespaces? \n Hello World - GitHub Docs \n 利用包含學號的字串作為帳號, 申請免費使用 Github. \n Python 課程教材:  https://www.learnpythonwithjupyter.com/  - PART 1 \n \n PART 1: Creating the basics 資料整理 (10%) \n 啟動可攜程式系統後, 在命令列中: \n y:\\>cd notebook \n y:\\notebook>jupyter lab --collaborative \n 進入  01_string_input_print.ipynb  練習如何修改 PART1 notebook 後存檔, 上傳至作業倉儲中的 downloads 目錄後, 透過  https://nbviewer.org/  將已經提交的  01_string_input_print.ipynb , 嵌入下列網頁中. \n \n 上列 iframe 標註的 html 語法: \n <iframe width="600" height="400" src="https://nbviewer.org/urls/mde.tw/cp2024_hw/downloads/01_string_input_print.ipynb"></iframe> \n 完成上述流程整理後, 請將 HW1 自評分數輸入 cp2024 自評表單中. \n HW 1 << \xa0 Previous \xa0 Next \xa0 >> w7 \n', 'tags': '', 'url': 'HW 1.html'}, {'title': 'HW 1 Exam', 'text': '每六人為一組進行協同程式練習 \n 透過 Jupyterlab 協同網頁, 輪流指定各組編寫 Topic 1 相關的程式練習, 以及網頁內容 (localhost 與 Codespaces 環境)編輯. \n HW 1 << \xa0 Previous \xa0 Next \xa0 >> w7\n \n \n Copyright ©2024 All rights reserved | This template is made with \xa0 \xa0 by \xa0 Colorlib \n \n \n \n', 'tags': '', 'url': 'HW 1 Exam.html'}, {'title': 'w7', 'text': '\n \n', 'tags': '', 'url': 'w7.html'}, {'title': 'w10', 'text': '\n 在 Python 中，變數命名規則： \n \n 首字母 必須是字母或底線。 \n 後續字符 可包含字母、數字、底線。 \n 區分大小寫 。 \n 不能用關鍵字 （如  if 、 True ）。 \n \n \n 在做的過程當中我發現我有比之前又更進步了, 雖然我有些地方還是會卡卡的但是跟之前比起來有快了許多。 \n', 'tags': '', 'url': 'w10.html'}, {'title': 'w11_hw', 'text': '1.\xa0 已知可以用 Python 程式 由上往下列印三角形 * , 或 由左往右列印三角形 * , 請將此程式延伸到可以在 10x10 的字元區域中, 以 "*" 字元列印出圓型區域. 完成後請將程式碼存入個人 Gist 後, 直接在個人作業網站中的 Brython 頁面中執行. (提示: ?src=gist_script_URL) \n 第一題解答:" *"字號圓形 \n 2. 已知可以在網頁中利用 Brython 繪製方格與塗色, 如下連結, 請設法修改此一程式, 直接將程式存入個人的 Gist, 並利用黑色方塊圍出一個圓形區域. \n 第二題解答: 網頁上的方格與塗色 \n 3. 完成上列題目後, 請利用 Youtube 影片 簡報 個人的解題過程與心得. \n \n', 'tags': '', 'url': 'w11_hw.html'}, {'title': 'w12_hw', 'text': '1. 請各組組員分別利用 Brython 以及 Jupyter lab 環境, 執行可攜程式 notebook 目錄中的 01_string_input_print.ipynb 至 10_for_search.ipynb 筆記本程式, 完成後請將能在 Brython 執行的程式碼存入個人 Gist 後, 將各程式執行連結放入 w12_hw 網頁上. 最後請說明各範例中所使用的程式語法以及執行心得. \n 第四題:list_append_remove \n 範例: 購物清單 \n 說明:顯示目前的購物清單,提示使用者輸入想要新增的項目。 如果該項目已經在清單中，顯示已存在；如果沒有，將其添加到清單中,提示使用者輸入要刪除的項目。 如果該項目存在於清單中，就將其刪除，並顯示更新後的清單。如果該項目不在清單中，顯示錯誤訊息。 \n shopping_list = ["milk", "bread", "eggs"]  # 初始購物清單\nprint("Current shopping list:", shopping_list)  # 顯示當前購物清單\n\nnew_item = input("Enter an item to add to the shopping list: ")  # 提示使用者輸入想加入的物品\n\n# 檢查新項目是否已在清單中\nif new_item in shopping_list:\n    print(f"{new_item} is already in the shopping list.")  # 提示此項目已存在\nelse:\n    shopping_list.append(new_item)  # 否則將新項目加入清單\n    print(f"{new_item} has been added.")\n\nprint("Updated shopping list:", shopping_list)  # 顯示更新後的清單\n\nitem_to_remove = input("Enter an item to remove from the shopping list: ")  # 提示使用者輸入要刪除的物品\n\n# 檢查要刪除的項目是否在清單中\nif item_to_remove in shopping_list:\n    shopping_list.remove(item_to_remove)  # 如果在清單中，將其刪除\n    print(f"{item_to_remove} has been removed.")\nelse:\n    print(f"{item_to_remove} is not in the shopping list.")  # 如果不在清單中，提示錯誤訊息\n\nprint("Final shopping list:", shopping_list)  # 顯示最終的清單\n \n 第五題: 05_list_index_pop_insert \n 範例: 點餐 \n 說明:這段程式碼的目的是處理一個包含食物名稱的串列 ( menu_items )，以檢查是否存在特定的元素並替換它。如果找到指定的項目，程式會先移除該項目，然後在相同位置插入一個新的項目。 \n menu_items = ["pizza", "soup", "tea"]  # 設定一個串列到變數裡\nprint("Current menu:", menu_items)  # 列印 menu_items\n\n# 使用 index 尋找串列裡的指定元素\nitem_to_change = "soup"\nif item_to_change in menu_items:\n    item_index = menu_items.index(item_to_change)  # 獲取元素的索引值\n    print(f"Index of \'{item_to_change}\':", item_index)  # 顯示索引值\n\n    # 使用 pop 刪除索引值對應的元素\n    removed_item = menu_items.pop(item_index)\n    print(f"Removed \'{removed_item}\' from the menu.")\n    print("Menu after removal:", menu_items)  # 列印刪除後的 menu\n\n    # 使用 insert 在同一索引值加入新元素\n    new_item = "garlic bread"\n    menu_items.insert(item_index, new_item)\n    print(f"Added \'{new_item}\' to the menu.")\n    print("Updated menu:", menu_items)  # 列印更新後的 menu\nelse:\n    print(f"\'{item_to_change}\' not found in the menu.")  # 如果元素不存在，顯示錯誤信息\n \n 第六題:06_list_slicing \n 範例: 城市 \n 說明:在 Python 中，串列（list）是一種常用的資料結構，用於存儲有序的元素集合。透過索引和切片，我們可以輕鬆地存取和操作串列中的元素。 \n countries = ["USA", "Czech Republic", "South Africa", "Japan", "Australia"]  # 設定一個串列\nprint(countries)  # 列印串列裡的元素\nprint(countries[1])  # 印出串列裡索引值1的元素\nprint(countries[0:3])  # 印出串列裡索引值0~2的元素\nprint(countries[0:5:2])  # 印出串列裡索引值範圍0~4, 間隔2的元素\nprint(countries[:2])  # 未設定起始索引值默認取0開始, 印出索引值0~1的元素\nprint(countries[2:])  # 未設定末端索引值默認取到最後, 印出索引值2~最後的元素\nprint(countries[3])  # 印出串列裡索引值3的元素\nprint(countries[-1])  # 印出串列裡索引值從後面往前數第1個的元素\nprint(countries[-3:-1])  # 印出串列裡索引值從後面往前數第3個開始, 到倒數第2個結束的元素\nprint(countries[::-1])  # 倒序列印整個串列的元素 \n \n \n  導入 brython 程式庫  \n \n \n \n \n  啟動 Brython  \n \n \n \n \n', 'tags': '', 'url': 'w12_hw.html'}, {'title': 'w14_ex', 'text': '請根據兩個圓繪圖所圍成的區域(目前圍成三個區域, 但若圓心移動可能彼此獨立)進行不同顏色著色, 條件是當各圓半徑與圓心座標變動時, 程式只需輸入兩個圓的圓心座標與半徑, 就可以完成各區域的著色任務. 參考範例 多個圓相交區域著色範例 \n 作業 \n from browser import html\nfrom browser import document as doc\nimport random\nimport math\n\n# 初始化畫布\ndef initialize_canvas(canvas_width=400, canvas_height=400, id="brython_div1"):\n    """\n    初始化一個畫布，返回畫布和 2D 繪圖上下文\n    """\n    canvas = html.CANVAS(width=canvas_width, height=canvas_height)\n    brython_div = doc[id]  # 獲取指定 ID 的 DIV\n    brython_div <= canvas  # 插入畫布到該 DIV\n    ctx = canvas.getContext("2d")\n    return canvas, ctx\n\n# 隨機顏色生成器\ndef random_color():\n    """\n    返回一個隨機 RGB 顏色\n    """\n    r = random.randint(0, 255)\n    g = random.randint(0, 255)\n    b = random.randint(0, 255)\n    return f"rgb({r},{g},{b})"\n\n# 判斷點是否在圓內\ndef is_point_in_circle(px, py, cx, cy, r):\n    """\n    判斷點 (px, py) 是否在圓心 (cx, cy) 半徑為 r 的圓內\n    """\n    return (px - cx) ** 2 + (py - cy) ** 2 <= r ** 2\n\n# 繪製三個圓並填充區域\ndef draw_three_circles(c1, c2, c3):\n    """\n    使用三個圓的參數進行區域填充。\n    c1, c2, c3: 每個圓的參數，格式為 (x, y, r)\n    """\n    canvas, ctx = initialize_canvas(400, 400)\n    ctx.clearRect(0, 0, canvas.width, canvas.height)\n    \n    color_map = {}\n    circles = [c1, c2, c3]\n    \n    for y in range(canvas.height):\n        for x in range(canvas.width):\n            # 判斷該點在哪些圓內\n            region = tuple(is_point_in_circle(x, y, *circle) for circle in circles)\n            \n            if region not in color_map:\n                color_map[region] = random_color()\n            \n            ctx.fillStyle = color_map[region]\n            ctx.fillRect(x, y, 1, 1)\n\n# 取得三個圓的參數\ndef get_circle_input():\n    """\n    模擬獲取三個圓的參數，返回一個圓參數列表\n    """\n    return [\n        (150, 150, 100),  # 圓1 (x, y, r)\n        (250, 150, 100),  # 圓2 (x, y, r)\n        (200, 250, 100)   # 圓3 (x, y, r)\n    ]\n\n# 主程式\ndef main():\n    """\n    程式入口，畫出三個圓\n    """\n    print("開始繪製三個圓的交疊區域...")\n    circles = get_circle_input()\n    draw_three_circles(*circles)\n    print("繪製完成！")\n\n# 執行主程式\nmain()\n \n \n', 'tags': '', 'url': 'w14_ex.html'}, {'title': 'w15', 'text': '題目一 \n 從 1 累加到 100 \xa0\xa0 \n sum_result = 0  # 建立變數 sum_result\ni = 1  # 指定 i 等於 1\nwhile i <= 100:  # 使用 while 迴圈加總 1 到 100\n    sum_result += i\n    i += 1\nprint(sum_result)  # 輸出結果\n \n 題目二 \n addto \n # 運算程式\ndef addto(start, end):   # 定義函數 addto，接受兩個參數 start 和 end\n    sum_result = 0       # 設定變數 sum_result，初始值為 0，用於儲存累加結果\n    i = start            # 設定變數 i 的初始值為 start，作為計數器\n    while i <= end:      # 使用 while 迴圈，條件為 i 小於或等於 end\n        sum_result += i  # 將目前的 i 值加到 sum_result 中\n        i += 1           # 將 i 的值加 1，進行下一次的迴圈\n    return sum_result    # 終止函數運行並返回計算結果 sum_result\n     \n# 調用程式\nresult = addto(1, 100)   # 調用函數 addto，設定起始值為 1，結束值為 100\nprint(result)            # 列印函數返回的結果 result\n \n 題目三 \n add_only_even \n def sum_of_numbers(start, end):\n    """\n    計算從 start 到 end 的總和\n\n    Args:\n        start (int): 起始值\n        end (int): 結束值\n\n    Returns:\n        int: 從 start 到 end 的總和\n    """\n    sum_result = 0  # 建立變數 sum_result，初始值為 0\n    i = start  # 初始化 i，設為起始值\n    while i <= end:  # 使用 while 迴圈，條件為 i 小於或等於結束值\n        sum_result += i  # 將 i 累加到 sum_result\n        i += 1  # 將 i 的值加 1，進行下一次的迴圈\n    return sum_result  # 返回最終的總和\n\n# 呼叫函式並輸出結果\nresult = sum_of_numbers(1, 100)\nprint(result)  # 輸出從 1 到 100 的總和 (答案 5050) \n 題目四 \n add_avoid_8 \n def avoid8(init, addto):\n    total = 0\n    for i in range(init, addto + 1):\n        # 判斷數值中是否有 "8"\n        if "8" in str(i):\n            continue  # 跳過包含 "8" 的數字\n        total += i  # 累加不包含 "8" 的數字\n    return total  # 返回最終結果\n\n# 測試函式\nresult = avoid8(1, 100)\nprint(result)  # 輸出總和，應該是 3763\n \n \n \n \n', 'tags': '', 'url': 'w15.html'}, {'title': 'w13', 'text': '\n  導入 brython 程式庫  \n \n \n \n \n  啟動 Brython  \n \n \n \n \n', 'tags': '', 'url': 'w13.html'}, {'title': 'w13_hw', 'text': '\n \n 在下兩個正方形外圍, 以黑色畫筆畫圓, 並設法在各線條所圍成的封閉區域塗上不同顏色. \n from browser import html\nfrom browser import document as doc\n\n# 創建畫布元素\ncanvas = html.CANVAS(width=500, height=500)\nbrython_div = doc["brython_div1"]\nbrython_div <= canvas\n\n# 定義圓心中心座標和半徑\nx1, y1 = 200, 200  # 第一個圓的中心座標\nx2, y2 = 300, 300  # 第二個圓的中心座標\nradius = 141.4  # 圓的半徑\n\nctx = canvas.getContext("2d")\n\n# 繪製第一個圓 (黑色邊框)\nctx.beginPath()\nctx.arc(x1, y1, radius, 0, 2 * 3.14159)\nctx.fillStyle = "yellowgreen"  # 圓的填充顏色\nctx.fill()\nctx.lineWidth = 3\nctx.strokeStyle = "darkorange"  # 圓的邊框顏色\nctx.stroke()\n\n# 繪製第二個圓 (黑色邊框)\nctx.beginPath()\nctx.arc(x2, y2, radius, 0, 2 * 3.14159)\nctx.fillStyle = "salmon"  # 圓的填充顏色\nctx.fill()\nctx.lineWidth = 3\nctx.strokeStyle = "forestgreen"  # 圓的邊框顏色\nctx.stroke()\n\n# 填充第一個和第二個圓的交集區域\nctx.save()\nctx.beginPath()\nctx.arc(x1, y1, radius, 0, 2 * 3.14159)\nctx.clip()  # 剪裁到第一個圓\nctx.beginPath()\nctx.arc(x2, y2, radius, 0, 2 * 3.14159)\nctx.fillStyle = "mediumpurple"  # 交集區域填充顏色\nctx.fill()\nctx.restore()\n\n# 繪製第一個正方形 (紅色邊框，紫色填充)\nctx.beginPath()\nctx.rect(100, 100, 200, 200)\nctx.fillStyle = "orchid"  # 第一個正方形的填充顏色\nctx.fill()\nctx.lineWidth = 3\nctx.strokeStyle = "crimson"  # 第一個正方形的邊框顏色\nctx.stroke()\n\n# 繪製第二個正方形 (紅色邊框，粉色填充)\nctx.beginPath()\nctx.rect(200, 200, 200, 200)\nctx.fillStyle = "hotpink"  # 第二個正方形的填充顏色\nctx.fill()\nctx.strokeStyle = "indianred"  # 第二個正方形的邊框顏色\nctx.stroke()\n\n# 繪製斜線 (藍色)\nctx.beginPath()\nctx.moveTo(100, 100)\nctx.lineTo(300, 300)\nctx.strokeStyle = "royalblue"  # 斜線顏色\nctx.lineWidth = 3\nctx.stroke()\n\n# 繪製圓的邊框 (黑色邊框)\nctx.beginPath()\nctx.arc(x1, y1, radius, 0, 2 * 3.14159)\nctx.strokeStyle = "darkorange"  # 圓的邊框顏色\nctx.stroke()\n\nctx.beginPath()\nctx.arc(x2, y2, radius, 0, 2 * 3.14159)\nctx.strokeStyle = "forestgreen"  # 圓的邊框顏色\nctx.stroke()\n \n \n \n \n \n \n \n', 'tags': '', 'url': 'w13_hw.html'}, {'title': 'HW 2', 'text': '', 'tags': '', 'url': 'HW 2.html'}, {'title': 'HW 2 Exam', 'text': '每六人為一組進行協同程式練習 \n 透過 Jupyterlab 協同網頁, 輪流指定各組編寫 HW 2 相關的程式練習, 以及網頁內容 (localhost 與 Codespaces 環境)編輯. \n', 'tags': '', 'url': 'HW 2 Exam.html'}, {'title': 'HW 3', 'text': '主題: Python 的數字、演算法與迴圈 (20%) \n Python 課程教材:  https://www.learnpythonwithjupyter.com/  - PART 4 and Part 5 \n 完成上述流程整理後, 請將 HW3 自評分數輸入 cp2024 自評表單中. \n', 'tags': '', 'url': 'HW 3.html'}, {'title': 'HW 3 Exam', 'text': '每六人為一組進行協同程式練習 \n 透過 Jupyterlab 協同網頁, 輪流指定各組編寫 HW 3 相關的程式練習, 以及網頁內容 (localhost 與 Codespaces 環境)編輯. \n', 'tags': '', 'url': 'HW 3 Exam.html'}, {'title': 'HW 4', 'text': '主題: 利用 Python 控制機電模擬系統 (20%) \n 利用  https://solvespace.com/  建立機械系統零組件 \n 利用  CoppeliaSim  建立機電模擬系統 \n 利用  Python  跨網路控制瀏覽器上的機電模擬系統 \n 範例: \n cd2023_pj3ag4_zmq_football_4.7.7z \n cd2024_2b_g6_steel_ball_platform_nxopen_copsim.7z \n 完成上述流程整理後, 請將 HW4 自評分數輸入 cp2024 自評表單中. \n', 'tags': '', 'url': 'HW 4.html'}, {'title': 'HW 4 Exam', 'text': '每六人為一組進行協同程式練習 \n 透過 Jupyterlab 協同網頁, 輪流指定各組編寫 HW 4 相關的程式練習, 以及網頁內容 (localhost 與 Codespaces 環境)編輯. \n', 'tags': '', 'url': 'HW 4 Exam.html'}, {'title': 'Final Report', 'text': '期末口頭與書面專題報告 (20%) \n 期末口頭專題報告影片: \n ...... \n 期末書面專題報告檔案 (pdf): \n ...... \n 電腦輔助設計與實習課程總結心得: \n ...... \n 期末報告自評成績: \n 完成上述流程後, 請將 Final Report 自評分數輸入 cp2024 自評表單中. \n', 'tags': '', 'url': 'Final Report.html'}, {'title': 'Brython', 'text': '從 1 累加到 100: \n 1 add to 100 \n  導入 brython 程式庫  \n \n \n \n \n  啟動 Brython  \n \n \n \n  導入 FileSaver 與 filereader  \n \n \n \n \n  導入 ace  \n \n \n \n \n \n \n  導入 gearUtils-0.9.js Cango 齒輪繪圖程式庫  \n \n \n \n \n \n \n  請注意, 這裡使用 Javascript 將 localStorage["kw_py_src1"] 中存在近端瀏覽器的程式碼, 由使用者決定存檔名稱 \n \n \n \n \n \n \n  add 1 to 100 開始  \n \n \n  add 1 to 100 結束 \n  editor1 開始  \n  用來顯示程式碼的 editor 區域  \n \n  以下的表單與按鈕與前面的 Javascript doSave 函式以及 FileSaver.min.js 互相配合  \n  存擋表單開始  \n Filename:  .py   \n  存擋表單結束  \n \n  執行與清除按鈕開始  \n Run   Output   清除輸出區 清除繪圖區 Reload \n  執行與清除按鈕結束  \n \n  程式執行 ouput 區  \n \n  Brython 程式執行的結果, 都以 brython_div1 作為切入位置  \n \n  editor1 結束   ##########################################  \n 從 1 累加到 100 part2: \n 1 add to 100 cango_three_gears BSnake AI Tetris Rotating Block \n  請注意, 這裡使用 Javascript 將 localStorage["kw_py_src2"] 中存在近端瀏覽器的程式碼, 由使用者決定存檔名稱 \n \n \n \n  add 1 to 100 part2 開始  \n \n \n  add 1 to 100 part2 結束 \n  editor2 開始  \n  用來顯示程式碼的 editor 區域  \n \n  以下的表單與按鈕與前面的 Javascript doSave 函式以及 FileSaver.min.js 互相配合  \n  存擋表單開始  \n Filename:  .py   \n  存擋表單結束  \n \n  執行與清除按鈕開始  \n Run   Output   清除輸出區 清除繪圖區 Reload \n  執行與清除按鈕結束  \n \n  程式執行 ouput 區  \n \n  Brython 程式執行的結果, 都以 brython_div1 作為切入位置  \n \n  editor2 結束  \n \n \n', 'tags': '', 'url': 'Brython.html'}]};